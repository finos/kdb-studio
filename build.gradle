import java.text.SimpleDateFormat

apply plugin: 'idea'
//and standard one
apply plugin: 'java'
apply plugin: 'application'

apply plugin: 'maven-publish'
apply plugin: 'signing'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs 'src/main'
        }
        resources {
            srcDirs 'src/main','images'
            include 'log4j2.xml'
            include 'studio*.properties'
            include 'org/netbeans/editor/Bundle*.properties'
            include '*.png'
            include 'notes.html'
            include 'build.txt'
            include 'images/**'
        }
    }
    test {
        java {
            srcDirs 'src/test'
        }
        resources {
            srcDirs 'src/test'
            include 'syntax.csv'
        }
    }
    intTest {
        java.srcDirs += ['src/test-integration']
        compileClasspath += sourceSets.main.compileClasspath + sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    }
}

configurations {
    txtmark
    intTestImplementation.extendsFrom implementation
    intTestRunimeOnly.extendsFrom runtimeOnly
}

test {
    useJUnitPlatform()
    systemProperty "user.home", System.getProperty("user.home")
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    systemProperty "user.home", System.getProperty("user.home")
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
compileIntTestJava.options.encoding = "UTF-8"

dependencies {
    txtmark group: 'com.github.rjeschke', name: 'txtmark', version: '0.13'

    def log4jVersion = '2.19.0'
    def poiVersion = '5.2.3'
    def junitVersion = '5.9.1'

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-iostreams', version: log4jVersion
    implementation group: 'com.fifesoft', name: 'rsyntaxtextarea', version: '3.3.0'
    implementation group: 'org.jfree', name: 'jfreechart', version: '1.5.3'
    implementation group: 'org.apache.poi', name: 'poi', version: poiVersion
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: poiVersion
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.11.2'
    implementation group: 'org.drjekyll', name: 'fontchooser', version: '2.4'
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.10.0'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junitVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
    intTestImplementation group: 'org.assertj', name: 'assertj-swing-junit', version: '3.9.2'
}

application {
    mainClass = 'studio.core.Studio'
}

jar {
    manifest {
        attributes(
            'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
            'Main-Class': application.mainClass
        )
    }
}

def buildTime() {
    def df = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss")
    return df.format(new Date())
}

task getBuildHash {
    doLast {
        file("src/main/build.txt").text = buildTime()
    }
}

task convertNotes (type: JavaExec) {
    mainClass = 'com.github.rjeschke.txtmark.Run'
    classpath = configurations.txtmark
    args 'notes.md'
    standardOutput new FileOutputStream(new File(projectDir,"src/main/notes.html"))
}

processResources.dependsOn('getBuildHash', 'convertNotes')

task sourcesJar(type: Jar) {
    classifier = 'sources'
    duplicatesStrategy = 'warn'
    from sourceSets.main.allSource
}

javadoc {
    failOnError = false
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

java {
    withJavadocJar()
    withSourcesJar()
}