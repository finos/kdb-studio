import java.text.SimpleDateFormat

apply plugin: 'idea'
//and standard one
apply plugin: 'java'
apply plugin: 'application'

apply plugin: 'maven-publish'
apply plugin: 'signing'

group = "com.github.dzmipt"
archivesBaseName = "kdbStudio"
version = "dz1.11"

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}

configurations {
    txtmark
}

dependencies {
    txtmark group: 'com.github.rjeschke', name: 'txtmark', version: '0.13'

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-iostreams', version: '2.14.0'
    implementation group: 'org.netbeans.api', name: 'org-openide-awt', version: 'RELEASE113'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.11.2'
    implementation group: 'org.jfree', name: 'jfreechart', version: '1.5.3'
    runtimeOnly files ('lib/images.jar')

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

sourceSets {
    main {
        java {
            srcDirs 'src/main'
        }
        resources {
            srcDirs 'src','images'
            include 'log4j2.xml'
            include 'studio*.properties'
            include 'org/netbeans/editor/Bundle*.properties'
            include '*.png'
            include 'notes.html'
            include 'build.txt'
        }
    }
    test {
        java {
            srcDirs 'src/test'
        }
        resources {
            srcDirs 'src/test'
            include 'src/syntax.csv'
        }
    }

    intTest {
        java.srcDirs += ['src/test-integration']
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

test {
    useJUnitPlatform()
}

application {
    mainClass = 'studio.core.Studio'
}

def buildTime() {
    def df = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss")
    return df.format(new Date())
}

task getBuildHash {
    doLast {
        file("src/build.txt").text = buildTime()
    }
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
}

task convertNotes (type: JavaExec) {
    mainClass = 'com.github.rjeschke.txtmark.Run'
    classpath = configurations.txtmark
    args 'notes.md'
    standardOutput new FileOutputStream(new File(projectDir,"src/notes.html"))
}

processResources.dependsOn('getBuildHash', 'convertNotes')

task sourcesJar(type: Jar) {
    classifier = 'sources'
    duplicatesStrategy = 'warn'
    from sourceSets.main.allSource
}

javadoc {
    failOnError = false
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

java {
    withJavadocJar()
    withSourcesJar()
}

def pubUsername = project.findProperty("ossrhUsername") ?: ""
def pubPassword = project.findProperty("ossrhPassword") ?: ""

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Studio for kdb+'
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = 'Studio for kdb+ is a rapid development environment for the ultra-fast database kdb+ from Kx Systems: http://www.kx.com.'
                url = 'https://github.com/dzmipt/kdbStudio'

                scm {
                    connection = 'git@github.com:dzmipt/kdbStudio.git'
                    developerConnection = 'git@github.com:dzmipt/kdbStudio.git'
                    url = 'https://github.com/dzmipt/kdbStudio'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'dzmipt'
                        name = 'Dmitry Zakharov'
                        email = 'dz.mipt@gmail.com'
                    }
                }
            }
        }
    }
    repositories {
        if(project.version.endsWith('-SNAPSHOT')) {
            maven {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
                mavenContent {
                    snapshotsOnly()
                }
                credentials {
                    username pubUsername
                    password pubPassword
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        } else {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                mavenContent {
                    releasesOnly()
                }
                credentials {
                    username pubUsername
                    password pubPassword
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
